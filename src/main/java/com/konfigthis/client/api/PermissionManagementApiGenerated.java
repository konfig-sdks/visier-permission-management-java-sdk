/*
 * Visier Permission Management APIs
 * Visier APIs for managing permissions within an organization
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CapabilityDTO;
import com.konfigthis.client.model.ContentPackageDTO;
import com.konfigthis.client.model.GetCapabilitiesAPIResponseDTO;
import com.konfigthis.client.model.GetContentPackagesAPIResponseDTO;
import com.konfigthis.client.model.GetDataSecurityObjectsAPIResponseDTO;
import com.konfigthis.client.model.GetPermissionsAPIResponseDTO;
import com.konfigthis.client.model.PermissionBulkOperationResponseDTO;
import com.konfigthis.client.model.PermissionDTO;
import com.konfigthis.client.model.PermissionsListDTO;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PermissionManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPermissionsCall(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsListDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPermissionsValidateBeforeCall(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionsListDTO' is set
        if (permissionsListDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsListDTO' when calling createPermissions(Async)");
        }

        return createPermissionsCall(permissionsListDTO, tenantCode, _callback);

    }


    private ApiResponse<PermissionBulkOperationResponseDTO> createPermissionsWithHttpInfo(PermissionsListDTO permissionsListDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = createPermissionsValidateBeforeCall(permissionsListDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPermissionsAsync(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPermissionsValidateBeforeCall(permissionsListDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePermissionsRequestBuilder {
        private List<PermissionDTO> permissions;
        private String tenantCode;

        private CreatePermissionsRequestBuilder() {
        }

        /**
         * Set permissions
         * @param permissions The list of permissions that will be created or updated (optional)
         * @return CreatePermissionsRequestBuilder
         */
        public CreatePermissionsRequestBuilder permissions(List<PermissionDTO> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to create permissions in. (optional)
         * @return CreatePermissionsRequestBuilder
         */
        public CreatePermissionsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for createPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return createPermissionsCall(permissionsListDTO, tenantCode, _callback);
        }

        private PermissionsListDTO buildBodyParams() {
            PermissionsListDTO permissionsListDTO = new PermissionsListDTO();
            permissionsListDTO.permissions(this.permissions);
            return permissionsListDTO;
        }

        /**
         * Execute createPermissions request
         * @return PermissionBulkOperationResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionBulkOperationResponseDTO execute() throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            ApiResponse<PermissionBulkOperationResponseDTO> localVarResp = createPermissionsWithHttpInfo(permissionsListDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPermissions request with HTTP info returned
         * @return ApiResponse&lt;PermissionBulkOperationResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionBulkOperationResponseDTO> executeWithHttpInfo() throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return createPermissionsWithHttpInfo(permissionsListDTO, tenantCode);
        }

        /**
         * Execute createPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return createPermissionsAsync(permissionsListDTO, tenantCode, _callback);
        }
    }

    /**
     * Create permissions
     * This API allows you to create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param permissionsListDTO  (required)
     * @return CreatePermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CreatePermissionsRequestBuilder createPermissions() throws IllegalArgumentException {
        return new CreatePermissionsRequestBuilder();
    }
    private okhttp3.Call deletePermissionsCall(String body, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermissionsValidateBeforeCall(String body, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deletePermissions(Async)");
        }

        return deletePermissionsCall(body, tenantCode, _callback);

    }


    private ApiResponse<PermissionBulkOperationResponseDTO> deletePermissionsWithHttpInfo(String body, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = deletePermissionsValidateBeforeCall(body, tenantCode, null);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePermissionsAsync(String body, String tenantCode, final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermissionsValidateBeforeCall(body, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeletePermissionsRequestBuilder {
        private String tenantCode;
        private String body;

        private DeletePermissionsRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return DeletePermissionsRequestBuilder
         */
        public DeletePermissionsRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to delete permissions from. (optional)
         * @return DeletePermissionsRequestBuilder
         */
        public DeletePermissionsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for deletePermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return deletePermissionsCall(body, tenantCode, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute deletePermissions request
         * @return PermissionBulkOperationResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionBulkOperationResponseDTO execute() throws ApiException {
            String body = buildBodyParams();
            ApiResponse<PermissionBulkOperationResponseDTO> localVarResp = deletePermissionsWithHttpInfo(body, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deletePermissions request with HTTP info returned
         * @return ApiResponse&lt;PermissionBulkOperationResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionBulkOperationResponseDTO> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return deletePermissionsWithHttpInfo(body, tenantCode);
        }

        /**
         * Execute deletePermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {
            String body = buildBodyParams();
            return deletePermissionsAsync(body, tenantCode, _callback);
        }
    }

    /**
     * Delete permissions
     * This API allows you to delete existing permissions.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param body  (required)
     * @return DeletePermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeletePermissionsRequestBuilder deletePermissions() throws IllegalArgumentException {
        return new DeletePermissionsRequestBuilder();
    }
    private okhttp3.Call getCapabilitiesCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/capabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCapabilitiesValidateBeforeCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        return getCapabilitiesCall(tenantCode, _callback);

    }


    private ApiResponse<GetCapabilitiesAPIResponseDTO> getCapabilitiesWithHttpInfo(String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getCapabilitiesValidateBeforeCall(tenantCode, null);
        Type localVarReturnType = new TypeToken<GetCapabilitiesAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCapabilitiesAsync(String tenantCode, final ApiCallback<GetCapabilitiesAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCapabilitiesValidateBeforeCall(tenantCode, _callback);
        Type localVarReturnType = new TypeToken<GetCapabilitiesAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCapabilitiesRequestBuilder {
        private String tenantCode;

        private GetCapabilitiesRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the capabilities from. (optional)
         * @return GetCapabilitiesRequestBuilder
         */
        public GetCapabilitiesRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getCapabilities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCapabilitiesCall(tenantCode, _callback);
        }


        /**
         * Execute getCapabilities request
         * @return GetCapabilitiesAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public GetCapabilitiesAPIResponseDTO execute() throws ApiException {
            ApiResponse<GetCapabilitiesAPIResponseDTO> localVarResp = getCapabilitiesWithHttpInfo(tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCapabilities request with HTTP info returned
         * @return ApiResponse&lt;GetCapabilitiesAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCapabilitiesAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getCapabilitiesWithHttpInfo(tenantCode);
        }

        /**
         * Execute getCapabilities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCapabilitiesAPIResponseDTO> _callback) throws ApiException {
            return getCapabilitiesAsync(tenantCode, _callback);
        }
    }

    /**
     * Retrieve a list of all permission capabilities
     * This API allows you to retrieve all the permission capabilities in your tenant.  You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return GetCapabilitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetCapabilitiesRequestBuilder getCapabilities() throws IllegalArgumentException {
        return new GetCapabilitiesRequestBuilder();
    }
    private okhttp3.Call getCapabilityCall(String capabilityId, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/capabilities/{capabilityId}"
            .replace("{" + "capabilityId" + "}", localVarApiClient.escapeString(capabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCapabilityValidateBeforeCall(String capabilityId, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'capabilityId' is set
        if (capabilityId == null) {
            throw new ApiException("Missing the required parameter 'capabilityId' when calling getCapability(Async)");
        }

        return getCapabilityCall(capabilityId, tenantCode, _callback);

    }


    private ApiResponse<CapabilityDTO> getCapabilityWithHttpInfo(String capabilityId, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getCapabilityValidateBeforeCall(capabilityId, tenantCode, null);
        Type localVarReturnType = new TypeToken<CapabilityDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCapabilityAsync(String capabilityId, String tenantCode, final ApiCallback<CapabilityDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCapabilityValidateBeforeCall(capabilityId, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<CapabilityDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCapabilityRequestBuilder {
        private final String capabilityId;
        private String tenantCode;

        private GetCapabilityRequestBuilder(String capabilityId) {
            this.capabilityId = capabilityId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve a capability from. (optional)
         * @return GetCapabilityRequestBuilder
         */
        public GetCapabilityRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getCapability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCapabilityCall(capabilityId, tenantCode, _callback);
        }


        /**
         * Execute getCapability request
         * @return CapabilityDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public CapabilityDTO execute() throws ApiException {
            ApiResponse<CapabilityDTO> localVarResp = getCapabilityWithHttpInfo(capabilityId, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCapability request with HTTP info returned
         * @return ApiResponse&lt;CapabilityDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CapabilityDTO> executeWithHttpInfo() throws ApiException {
            return getCapabilityWithHttpInfo(capabilityId, tenantCode);
        }

        /**
         * Execute getCapability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CapabilityDTO> _callback) throws ApiException {
            return getCapabilityAsync(capabilityId, tenantCode, _callback);
        }
    }

    /**
     * Retrieve a permission capability&#39;s details
     * This API allows you to retrieve the details of a specific capability.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param capabilityId The unique identifier of the capability you want to retrieve. (required)
     * @return GetCapabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetCapabilityRequestBuilder getCapability(String capabilityId) throws IllegalArgumentException {
        if (capabilityId == null) throw new IllegalArgumentException("\"capabilityId\" is required but got null");
            

        return new GetCapabilityRequestBuilder(capabilityId);
    }
    private okhttp3.Call getContentPackageCall(String contentPackageId, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/content-packages/{contentPackageId}"
            .replace("{" + "contentPackageId" + "}", localVarApiClient.escapeString(contentPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentPackageValidateBeforeCall(String contentPackageId, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentPackageId' is set
        if (contentPackageId == null) {
            throw new ApiException("Missing the required parameter 'contentPackageId' when calling getContentPackage(Async)");
        }

        return getContentPackageCall(contentPackageId, tenantCode, _callback);

    }


    private ApiResponse<ContentPackageDTO> getContentPackageWithHttpInfo(String contentPackageId, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getContentPackageValidateBeforeCall(contentPackageId, tenantCode, null);
        Type localVarReturnType = new TypeToken<ContentPackageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentPackageAsync(String contentPackageId, String tenantCode, final ApiCallback<ContentPackageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentPackageValidateBeforeCall(contentPackageId, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<ContentPackageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentPackageRequestBuilder {
        private final String contentPackageId;
        private String tenantCode;

        private GetContentPackageRequestBuilder(String contentPackageId) {
            this.contentPackageId = contentPackageId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve a content package from. (optional)
         * @return GetContentPackageRequestBuilder
         */
        public GetContentPackageRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getContentPackage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentPackageCall(contentPackageId, tenantCode, _callback);
        }


        /**
         * Execute getContentPackage request
         * @return ContentPackageDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ContentPackageDTO execute() throws ApiException {
            ApiResponse<ContentPackageDTO> localVarResp = getContentPackageWithHttpInfo(contentPackageId, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentPackage request with HTTP info returned
         * @return ApiResponse&lt;ContentPackageDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentPackageDTO> executeWithHttpInfo() throws ApiException {
            return getContentPackageWithHttpInfo(contentPackageId, tenantCode);
        }

        /**
         * Execute getContentPackage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentPackageDTO> _callback) throws ApiException {
            return getContentPackageAsync(contentPackageId, tenantCode, _callback);
        }
    }

    /**
     * Retrieve a content package&#39;s details
     * This API allows you to retrieve the details of a specific content package.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param contentPackageId The unique identifier of the content package you want to retrieve. (required)
     * @return GetContentPackageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetContentPackageRequestBuilder getContentPackage(String contentPackageId) throws IllegalArgumentException {
        if (contentPackageId == null) throw new IllegalArgumentException("\"contentPackageId\" is required but got null");
            

        return new GetContentPackageRequestBuilder(contentPackageId);
    }
    private okhttp3.Call getContentPackagesCall(String tenantCode, String searchString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/content-packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (searchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchString", searchString));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentPackagesValidateBeforeCall(String tenantCode, String searchString, final ApiCallback _callback) throws ApiException {
        return getContentPackagesCall(tenantCode, searchString, _callback);

    }


    private ApiResponse<GetContentPackagesAPIResponseDTO> getContentPackagesWithHttpInfo(String tenantCode, String searchString) throws ApiException {
        okhttp3.Call localVarCall = getContentPackagesValidateBeforeCall(tenantCode, searchString, null);
        Type localVarReturnType = new TypeToken<GetContentPackagesAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentPackagesAsync(String tenantCode, String searchString, final ApiCallback<GetContentPackagesAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentPackagesValidateBeforeCall(tenantCode, searchString, _callback);
        Type localVarReturnType = new TypeToken<GetContentPackagesAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentPackagesRequestBuilder {
        private String tenantCode;
        private String searchString;

        private GetContentPackagesRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the content packages from. (optional)
         * @return GetContentPackagesRequestBuilder
         */
        public GetContentPackagesRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set searchString
         * @param searchString Optional search string to return only content packages whose display name or description contains that search string.  If searchString is empty or not provided, the response returns a list of all content packages. (optional)
         * @return GetContentPackagesRequestBuilder
         */
        public GetContentPackagesRequestBuilder searchString(String searchString) {
            this.searchString = searchString;
            return this;
        }
        
        /**
         * Build call for getContentPackages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentPackagesCall(tenantCode, searchString, _callback);
        }


        /**
         * Execute getContentPackages request
         * @return GetContentPackagesAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public GetContentPackagesAPIResponseDTO execute() throws ApiException {
            ApiResponse<GetContentPackagesAPIResponseDTO> localVarResp = getContentPackagesWithHttpInfo(tenantCode, searchString);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentPackages request with HTTP info returned
         * @return ApiResponse&lt;GetContentPackagesAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetContentPackagesAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getContentPackagesWithHttpInfo(tenantCode, searchString);
        }

        /**
         * Execute getContentPackages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetContentPackagesAPIResponseDTO> _callback) throws ApiException {
            return getContentPackagesAsync(tenantCode, searchString, _callback);
        }
    }

    /**
     * Retrieve a list of all content packages
     * This API allows you to retrieve the list of available content packages.  You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return GetContentPackagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetContentPackagesRequestBuilder getContentPackages() throws IllegalArgumentException {
        return new GetContentPackagesRequestBuilder();
    }
    private okhttp3.Call getDataSecurityObjectsCall(List<String> id, Boolean includeDetails, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/data-security-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDetails", includeDetails));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSecurityObjectsValidateBeforeCall(List<String> id, Boolean includeDetails, String tenantCode, final ApiCallback _callback) throws ApiException {
        return getDataSecurityObjectsCall(id, includeDetails, tenantCode, _callback);

    }


    private ApiResponse<GetDataSecurityObjectsAPIResponseDTO> getDataSecurityObjectsWithHttpInfo(List<String> id, Boolean includeDetails, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getDataSecurityObjectsValidateBeforeCall(id, includeDetails, tenantCode, null);
        Type localVarReturnType = new TypeToken<GetDataSecurityObjectsAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataSecurityObjectsAsync(List<String> id, Boolean includeDetails, String tenantCode, final ApiCallback<GetDataSecurityObjectsAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSecurityObjectsValidateBeforeCall(id, includeDetails, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<GetDataSecurityObjectsAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataSecurityObjectsRequestBuilder {
        private List<String> id;
        private Boolean includeDetails;
        private String tenantCode;

        private GetDataSecurityObjectsRequestBuilder() {
        }

        /**
         * Set id
         * @param id The unique identifiers of the data security objects (analytic objects) to retrieve.  Default is all data security objects. (optional)
         * @return GetDataSecurityObjectsRequestBuilder
         */
        public GetDataSecurityObjectsRequestBuilder id(List<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set includeDetails
         * @param includeDetails If true, the response includes the analytic objects (display name, ID, and object type), related objects,  securable properties, and securable dimensions. If false, the response only includes analytic objects  (display name, ID, and object type). Default is false. (optional)
         * @return GetDataSecurityObjectsRequestBuilder
         */
        public GetDataSecurityObjectsRequestBuilder includeDetails(Boolean includeDetails) {
            this.includeDetails = includeDetails;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve data security objects from. (optional)
         * @return GetDataSecurityObjectsRequestBuilder
         */
        public GetDataSecurityObjectsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getDataSecurityObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataSecurityObjectsCall(id, includeDetails, tenantCode, _callback);
        }


        /**
         * Execute getDataSecurityObjects request
         * @return GetDataSecurityObjectsAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public GetDataSecurityObjectsAPIResponseDTO execute() throws ApiException {
            ApiResponse<GetDataSecurityObjectsAPIResponseDTO> localVarResp = getDataSecurityObjectsWithHttpInfo(id, includeDetails, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataSecurityObjects request with HTTP info returned
         * @return ApiResponse&lt;GetDataSecurityObjectsAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetDataSecurityObjectsAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getDataSecurityObjectsWithHttpInfo(id, includeDetails, tenantCode);
        }

        /**
         * Execute getDataSecurityObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetDataSecurityObjectsAPIResponseDTO> _callback) throws ApiException {
            return getDataSecurityObjectsAsync(id, includeDetails, tenantCode, _callback);
        }
    }

    /**
     * Retrieve a list of data security objects
     * This API allows you to retrieve the list of available data security objects.  Data security objects are analytic objects and their related objects that are available to define  permissions’ data security profiles.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return GetDataSecurityObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSecurityObjectsRequestBuilder getDataSecurityObjects() throws IllegalArgumentException {
        return new GetDataSecurityObjectsRequestBuilder();
    }
    private okhttp3.Call getPermissionCall(String permissionId, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions/{permissionId}"
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionValidateBeforeCall(String permissionId, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling getPermission(Async)");
        }

        return getPermissionCall(permissionId, tenantCode, _callback);

    }


    private ApiResponse<PermissionDTO> getPermissionWithHttpInfo(String permissionId, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getPermissionValidateBeforeCall(permissionId, tenantCode, null);
        Type localVarReturnType = new TypeToken<PermissionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermissionAsync(String permissionId, String tenantCode, final ApiCallback<PermissionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionValidateBeforeCall(permissionId, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PermissionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPermissionRequestBuilder {
        private final String permissionId;
        private String tenantCode;

        private GetPermissionRequestBuilder(String permissionId) {
            this.permissionId = permissionId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve a permission from. (optional)
         * @return GetPermissionRequestBuilder
         */
        public GetPermissionRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getPermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPermissionCall(permissionId, tenantCode, _callback);
        }


        /**
         * Execute getPermission request
         * @return PermissionDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionDTO execute() throws ApiException {
            ApiResponse<PermissionDTO> localVarResp = getPermissionWithHttpInfo(permissionId, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPermission request with HTTP info returned
         * @return ApiResponse&lt;PermissionDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionDTO> executeWithHttpInfo() throws ApiException {
            return getPermissionWithHttpInfo(permissionId, tenantCode);
        }

        /**
         * Execute getPermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionDTO> _callback) throws ApiException {
            return getPermissionAsync(permissionId, tenantCode, _callback);
        }
    }

    /**
     * Retrieve a permission&#39;s details
     * This API allows you to retrieve the details for a specified permission.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param permissionId The unique identifier of the permission you want to retrieve. (required)
     * @return GetPermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionRequestBuilder getPermission(String permissionId) throws IllegalArgumentException {
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
            

        return new GetPermissionRequestBuilder(permissionId);
    }
    private okhttp3.Call getPermissionsCall(String tenantCode, Boolean includeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDetails", includeDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(String tenantCode, Boolean includeDetails, final ApiCallback _callback) throws ApiException {
        return getPermissionsCall(tenantCode, includeDetails, _callback);

    }


    private ApiResponse<GetPermissionsAPIResponseDTO> getPermissionsWithHttpInfo(String tenantCode, Boolean includeDetails) throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(tenantCode, includeDetails, null);
        Type localVarReturnType = new TypeToken<GetPermissionsAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermissionsAsync(String tenantCode, Boolean includeDetails, final ApiCallback<GetPermissionsAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(tenantCode, includeDetails, _callback);
        Type localVarReturnType = new TypeToken<GetPermissionsAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPermissionsRequestBuilder {
        private String tenantCode;
        private Boolean includeDetails;

        private GetPermissionsRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the permissions from. (optional)
         * @return GetPermissionsRequestBuilder
         */
        public GetPermissionsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set includeDetails
         * @param includeDetails If true, returns the permission&#39;s details. If false, only returns the permissions&#39; ID, display name,  and description. Default is false. (optional)
         * @return GetPermissionsRequestBuilder
         */
        public GetPermissionsRequestBuilder includeDetails(Boolean includeDetails) {
            this.includeDetails = includeDetails;
            return this;
        }
        
        /**
         * Build call for getPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPermissionsCall(tenantCode, includeDetails, _callback);
        }


        /**
         * Execute getPermissions request
         * @return GetPermissionsAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public GetPermissionsAPIResponseDTO execute() throws ApiException {
            ApiResponse<GetPermissionsAPIResponseDTO> localVarResp = getPermissionsWithHttpInfo(tenantCode, includeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPermissions request with HTTP info returned
         * @return ApiResponse&lt;GetPermissionsAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPermissionsAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getPermissionsWithHttpInfo(tenantCode, includeDetails);
        }

        /**
         * Execute getPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPermissionsAPIResponseDTO> _callback) throws ApiException {
            return getPermissionsAsync(tenantCode, includeDetails, _callback);
        }
    }

    /**
     * Retrieve a list of all permissions
     * This API allows you to retrieve the full list of user permissions in your tenant.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return GetPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionsRequestBuilder getPermissions() throws IllegalArgumentException {
        return new GetPermissionsRequestBuilder();
    }
    private okhttp3.Call updatePermissionsCall(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsListDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePermissionsValidateBeforeCall(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionsListDTO' is set
        if (permissionsListDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsListDTO' when calling updatePermissions(Async)");
        }

        return updatePermissionsCall(permissionsListDTO, tenantCode, _callback);

    }


    private ApiResponse<PermissionBulkOperationResponseDTO> updatePermissionsWithHttpInfo(PermissionsListDTO permissionsListDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = updatePermissionsValidateBeforeCall(permissionsListDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePermissionsAsync(PermissionsListDTO permissionsListDTO, String tenantCode, final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePermissionsValidateBeforeCall(permissionsListDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PermissionBulkOperationResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePermissionsRequestBuilder {
        private List<PermissionDTO> permissions;
        private String tenantCode;

        private UpdatePermissionsRequestBuilder() {
        }

        /**
         * Set permissions
         * @param permissions The list of permissions that will be created or updated (optional)
         * @return UpdatePermissionsRequestBuilder
         */
        public UpdatePermissionsRequestBuilder permissions(List<PermissionDTO> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to update permissions in. (optional)
         * @return UpdatePermissionsRequestBuilder
         */
        public UpdatePermissionsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for updatePermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return updatePermissionsCall(permissionsListDTO, tenantCode, _callback);
        }

        private PermissionsListDTO buildBodyParams() {
            PermissionsListDTO permissionsListDTO = new PermissionsListDTO();
            permissionsListDTO.permissions(this.permissions);
            return permissionsListDTO;
        }

        /**
         * Execute updatePermissions request
         * @return PermissionBulkOperationResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionBulkOperationResponseDTO execute() throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            ApiResponse<PermissionBulkOperationResponseDTO> localVarResp = updatePermissionsWithHttpInfo(permissionsListDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePermissions request with HTTP info returned
         * @return ApiResponse&lt;PermissionBulkOperationResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionBulkOperationResponseDTO> executeWithHttpInfo() throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return updatePermissionsWithHttpInfo(permissionsListDTO, tenantCode);
        }

        /**
         * Execute updatePermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionBulkOperationResponseDTO> _callback) throws ApiException {
            PermissionsListDTO permissionsListDTO = buildBodyParams();
            return updatePermissionsAsync(permissionsListDTO, tenantCode, _callback);
        }
    }

    /**
     * Update permissions
     * This API allows you to update existing permissions.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param permissionsListDTO  (required)
     * @return UpdatePermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePermissionsRequestBuilder updatePermissions() throws IllegalArgumentException {
        return new UpdatePermissionsRequestBuilder();
    }
}
